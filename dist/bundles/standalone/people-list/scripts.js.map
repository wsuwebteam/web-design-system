{"version":3,"sources":["webpack://@wsuwebteam/wsu-web-design-system/./node_modules/fuse.js/dist/fuse.esm.js","webpack://@wsuwebteam/wsu-web-design-system/./_assets/js/partials/wsuAria.js","webpack://@wsuwebteam/wsu-web-design-system/./src/modules/people-list/_script.js"],"names":["isArray","value","Array","getTag","isString","isNumber","isObject","isDefined","isBlank","trim","length","undefined","Object","prototype","toString","call","hasOwn","hasOwnProperty","KeyStore","constructor","keys","this","_keys","_keyMap","totalWeight","forEach","key","obj","createKey","weight","push","id","get","keyId","toJSON","JSON","stringify","path","src","createKeyPath","createKeyId","Error","name","INVALID_KEY_WEIGHT_VALUE","split","join","Config","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","useExtendedSearch","getFn","list","arr","deepGet","index","isObjectLike","isBoolean","result","baseToString","i","len","ignoreLocation","ignoreFieldNorm","SPACE","FuseIndex","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","sqrt","n","parseFloat","round","set","clear","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","MAX_BITS","createPatternAlphabet","mask","char","charAt","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","end","substr","searchIn","text","isMatch","indices","allIndices","totalScore","hasMatches","patternAlphabet","patternLen","textLen","max","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","binMin","binMid","floor","start","finish","bitArr","j","charMatch","matchmask","convertMaskToIndices","search","BaseMatch","getMatch","multiRegex","singleRegex","exp","matches","FuzzyMatch","super","_bitapSearch","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","type","registeredSearchers","createSearcher","searcherClass","condition","LogicalOperator","isExpression","query","convertToExplicit","parse","auto","next","isQueryPath","isPath","isLeaf","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","searcher","node","children","operator","transformMatches","data","refIndex","transformScore","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","results","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","Number","EPSILON","computeScore$1","sort","slice","transformers","transformer","format","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","parseIndex","config","parseQuery","args","register","filter","queryItem","found","token","isMultiMatch","isSingleMatch","_","numMatches","qLen","pLen","wsuAriaExpanded","element","hasAttribute","setAttribute","PeopleList","el","peopleElements","filtersContainer","filterToggles","searchInput","params","filterAttributeMap","organization","classification","tag","category","componentId","dataset","displayFields","excludedTerms","excludeTermValues","activeFilters","selectedFiltersList","allPeopleString","processPeopleFilters","people","selectedFilterInputs","filteredPeople","f","selectedInputs","from","elements","checked","concat","selectedValues","s","person","personsValues","some","findIndex","o","slug","r","content","input","replace","nextSibling","textContent","innerHTML","updateSelectedFilters","personElement","find","p","nid","style","display","order","classList","generateHTML","filtersString","filters","nonSearchFilters","document","createElement","className","selectFilter","filterOptions","includes","x","y","createSelectFilterHTML","searchFilterLabel","createPeopleFilters","outerHTML","container","peopleContainer","columns","peopleHTML","photo","photo_srcset","headingtag","title","t","email","office","phone","website","websiteLinkText","populatePeopleContainer","reduce","acc","curr","attrValue","getAttribute","fetch","PEOPLE_API_BASE_URL","then","response","json","error","console","setTimeout","querySelector","querySelectorAll","addEventListener","e","target","toggle","closest","filterList","clickedFiltersContainer","insideSelectFilter","bindEvents"],"mappings":"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","file":"bundles/standalone/people-list/scripts.js","sourcesContent":["/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n","const wsuAriaExpanded = ( element, value ) => {\r\n\r\n    if ( element.hasAttribute( 'aria-expanded') ) {\r\n\r\n        element.setAttribute( 'aria-expanded', value );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst wsuAriaIsExpanded = ( element ) => {\r\n\r\n    if ( element.hasAttribute( 'aria-expanded') ) {\r\n\r\n        return ('true' == element.getAttribute( 'aria-expanded') );\r\n\r\n    } else {\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n} \r\n\r\n\r\nexport { wsuAriaExpanded, wsuAriaIsExpanded }","import Fuse from \"fuse.js\";\r\nimport {\r\n  wsuAriaExpanded,\r\n  wsuAriaIsExpanded,\r\n} from \"../../../_assets/js/partials/wsuPartials\";\r\n\r\nconst PeopleList = function (el) {\r\n  const apiEndpoint = PEOPLE_API_BASE_URL + \"/wp-json/peopleapi/v1/people?\";\r\n  const queryAttributes = [\r\n    \"count\",\r\n    \"page\",\r\n    \"nid\",\r\n    \"classification\",\r\n    \"university-category\",\r\n    \"university-location\",\r\n    \"university-organization\",\r\n    \"photo-size\",\r\n    \"profile-order\",\r\n  ];\r\n  const filterAttributeMap = {\r\n    location: \"university_location\",\r\n    organization: \"university_organization\",\r\n    classification: \"classification\",\r\n    tag: \"tag\",\r\n    category: \"category\",\r\n  };\r\n  const searcher = new Fuse([], {\r\n    shouldSort: true,\r\n    minMatchCharLength: 3,\r\n    threshold: 0.3,\r\n    keys: [\r\n      {\r\n        name: \"name\",\r\n        weight: 3,\r\n      },\r\n      \"title\",\r\n      \"nid\",\r\n      \"email\",\r\n      \"phone\",\r\n    ],\r\n  });\r\n  const componentId = el.dataset.componentId;\r\n  const displayFields = el.dataset.displayFields.split(\",\");\r\n  const excludedTerms = el.dataset.excludeTermValues.split(\",\");\r\n  const activeFilters = [];\r\n  let selectedFiltersList = [];\r\n  let allPeopleString = \"\";\r\n  let people;\r\n  let peopleContainer;\r\n  let peopleElements;\r\n  let filtersContainer;\r\n  let filterToggles;\r\n  let searchInput;\r\n\r\n  function getPersonHTML(person) {\r\n    return `<div class=\"wsu-card wsu-card-person wsu-image-frame--ratio-square wsu-card--outline-shadow js-people-list__person\" data-nid=\"${\r\n      person.nid\r\n    }\">\r\n        ${\r\n          displayFields.includes(\"photo\")\r\n            ? `\r\n            <div class=\"wsu-image-frame wsu-card__person-image wsu-people-list__person-image${\r\n              person.photo ? \" has-photo\" : \"\"\r\n            }\">\r\n                ${\r\n                  person.photo\r\n                    ? `\r\n                    <img src=\"${person.photo}\"\r\n                        ${\r\n                          person.photo_srcset\r\n                            ? `srcset=\"${person.photo_srcset}\"`\r\n                            : \"\"\r\n                        }\r\n                        ${\r\n                          person.photo_srcset\r\n                            ? `sizes=\"(min-width: 768px) 33.3vw, 100vw\"`\r\n                            : \"\"\r\n                        }>`\r\n                    : \"\"\r\n                }\r\n            </div>`\r\n            : \"\"\r\n        }\r\n\r\n        <div class=\"wsu-card__content\">\r\n            ${\r\n              displayFields.includes(\"name\")\r\n                ? `<${el.dataset.headingtag} class=\"wsu-card__person-name\">${person.name}</${el.dataset.headingtag}>`\r\n                : \"\"\r\n            }\r\n            \r\n            ${\r\n              displayFields.includes(\"title\") && Array.isArray(person.title)\r\n                ? person.title\r\n                    .map(\r\n                      (t) => `<div class=\"wsu-card__person-title\">${t}</div>`\r\n                    )\r\n                    .join(\"\")\r\n                : \"\"\r\n            }\r\n            \r\n            ${\r\n              displayFields.includes(\"email\") && person.email\r\n                ? `\r\n                <div class=\"wsu-meta-email wsu-meta--icon-crimson\">\r\n                    <span class=\"wsu-screen-reader-only\">Email Address</span>\r\n                    <a href=\"mailto:${person.email}\">${person.email}</a>\r\n                </div>`\r\n                : \"\"\r\n            }\r\n\r\n            ${\r\n              displayFields.includes(\"office\") && person.office\r\n                ? `\r\n                <div class=\"wsu-meta-location wsu-meta--icon-crimson\">\r\n                    <span class=\"wsu-screen-reader-only\">Location</span>\r\n                    <a href=\"#\">${person.office}</a>\r\n                </div>`\r\n                : \"\"\r\n            }\r\n\r\n            ${\r\n              displayFields.includes(\"phone\") && person.phone\r\n                ? `\r\n                <div class=\"wsu-meta-phone wsu-meta--icon-crimson\">\r\n                    <span class=\"wsu-screen-reader-only\">Phone</span>\r\n                    <a href=\"tel:${person.phone}\">${person.phone}</a>\r\n                </div>`\r\n                : \"\"\r\n            }\r\n\r\n            ${\r\n              displayFields.includes(\"website\") && person.website\r\n                ? `\r\n                <div class=\"wsu-meta-website wsu-meta--icon-crimson\">\r\n                    <a href=\"${person.website}\">${el.dataset.websiteLinkText}</a>\r\n                </div>`\r\n                : \"\"\r\n            }\r\n        </div>\r\n    </div>`;\r\n  }\r\n\r\n  function createSelectFilterHTML(filter, people) {\r\n    let options = [];\r\n\r\n    // set filter options\r\n    people.forEach((person) => {\r\n      const filterOptions = person[filterAttributeMap[filter]];\r\n\r\n      if (filterOptions && filterOptions.length > 0) {\r\n        if (!activeFilters.includes(filter)) {\r\n          activeFilters.push(filter);\r\n        }\r\n\r\n        filterOptions.forEach((v) => {\r\n          if (\r\n            !excludedTerms.includes(v.slug) &&\r\n            options.findIndex((o) => o.slug === v.slug) === -1\r\n          ) {\r\n            options.push(v);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // sort options alphabetically\r\n    options.sort(function (a, b) {\r\n      var x = a.name.toLowerCase();\r\n      var y = b.name.toLowerCase();\r\n      return x < y ? -1 : x > y ? 1 : 0;\r\n    });\r\n\r\n    // class=\"wsu-screen-reader-only\"\r\n    return options.length > 0\r\n      ? `<div class=\"wsu-people-list__select-filter\">\r\n            <button type=\"button\" class=\"wsu-button wsu-people-list__filter-toggle\" aria-expanded=\"false\" aria-controls=\"${componentId}__content\">${\r\n          el.dataset[filter + \"FilterLabel\"]\r\n        }</button>\r\n            <div id=\"${componentId}__content\" class=\"wsu-people-list__select-list-container\" aria-labelledby=\"${componentId}__title\">\r\n                <ul class=\"wsu-people-list__select-list\">\r\n                    ${options\r\n                      .map(\r\n                        (o) => `<li class=\"wsu-people-list__select-list-item\">\r\n                        <label class=\"wsu-people-list__fitler-label\">\r\n                            <input class=\"wsu-people-list__fitler-checkbox\" type=\"checkbox\" name=\"${filter}[]\" value=\"${o.slug}\" />\r\n                            ${o.name}                    \r\n                        </label>\r\n                    </li>`\r\n                      )\r\n                      .join(\"\")}\r\n                </ul>\r\n            </div>\r\n        </div>`\r\n      : \"\";\r\n  }\r\n\r\n  function createPeopleFilters(filtersString, people) {\r\n    let content = \"\";\r\n    const filters = filtersString.split(\",\");\r\n    const nonSearchFilters = filters.filter((f) => f && f !== \"search\");\r\n\r\n    // setup filters container\r\n    const filtersContainer = document.createElement(\"form\");\r\n    filtersContainer.className = \"wsu-people-list__filters-container\";\r\n\r\n    // create non-search filters\r\n    nonSearchFilters.forEach((filter) => {\r\n      const selectFilter = createSelectFilterHTML(filter, people);\r\n      content += selectFilter;\r\n    });\r\n\r\n    // create search filter\r\n    if (filters.includes(\"search\")) {\r\n      content += `\r\n        <div class=\"wsu-people-list__search-filter\">\r\n            <input class=\"wsu-people-list__search-input\" type=\"text\" placeholder=\"${el.dataset.searchFilterLabel}\"/>\r\n        </div>`;\r\n    }\r\n\r\n    content += `\r\n      <div class=\"wsu-people-list__selected-filters-container\">\r\n        <ul class=\"wsu-people-list__selected-filters-list\">\r\n        </ul>\r\n      </div>\r\n    `;\r\n\r\n    // write filters to container\r\n    filtersContainer.innerHTML = content;\r\n\r\n    return filtersContainer;\r\n  }\r\n\r\n  function populatePeopleContainer(people, peopleContainer) {\r\n    let peopleHTML = \"\";\r\n\r\n    people.forEach((p) => {\r\n      peopleHTML += getPersonHTML(p);\r\n    });\r\n\r\n    peopleContainer.innerHTML = peopleHTML;\r\n  }\r\n\r\n  function createPeopleContainer() {\r\n    const container = document.createElement(\"div\");\r\n    container.className = `wsu-card-wrapper wsu-card-wrapper--per-row-${el.dataset.columns} js-people-list`;\r\n\r\n    return container;\r\n  }\r\n\r\n  function updatePeopleList(people) {\r\n    let i = 0;\r\n\r\n    // show and sort people by filters\r\n    people.forEach((person) => {\r\n      const personElement = Array.from(peopleElements).find(\r\n        (p) => p.dataset.nid === person.nid\r\n      );\r\n\r\n      if (personElement) {\r\n        personElement.style.display = null;\r\n        personElement.style.order = i;\r\n        i++;\r\n      }\r\n    });\r\n\r\n    // hide people not found in filtering\r\n    const peopleToHide = Array.from(peopleElements).filter((personElement) => {\r\n      return (\r\n        people.findIndex((p) => p.nid === personElement.dataset.nid) === -1\r\n      );\r\n    });\r\n\r\n    peopleToHide.forEach((personElement) => {\r\n      personElement.style.display = \"none\";\r\n      personElement.style.order = null;\r\n    });\r\n\r\n    people.length === 0\r\n      ? el.classList.add(\"has-no-results\")\r\n      : el.classList.remove(\"has-no-results\");\r\n  }\r\n\r\n  function updateSelectedFilters(selectedFilterInputs) {\r\n    let content = \"\";\r\n\r\n    selectedFilterInputs.forEach((input) => {\r\n      content += `\r\n        <li class=\"wsu-people-list__selected-filters-list-item\">\r\n          <button class=\"wsu-people-list__selected-filter-toggle\" type=\"button\" \r\n            data-filter-list=\"${input.name.replace(\"[]\", \"\")}\" \r\n            data-value=\"${input.value}\">\r\n            ${input.nextSibling.textContent.trim()}\r\n          </button>\r\n        </li>\r\n      `;\r\n    });\r\n\r\n    selectedFiltersList.innerHTML = content;\r\n  }\r\n\r\n  function processPeopleFilters() {\r\n    let selectedFilterInputs = [];\r\n    let filteredPeople = JSON.parse(allPeopleString);\r\n\r\n    activeFilters.forEach((f) => {\r\n      const selectedInputs = Array.from(\r\n        filtersContainer.elements[`${f}[]`]\r\n      ).filter((f) => f.checked);\r\n\r\n      if (selectedInputs.length > 0) {\r\n        selectedFilterInputs = selectedFilterInputs.concat(selectedInputs);\r\n        const selectedValues = selectedInputs.map((s) => s.value);\r\n\r\n        filteredPeople = filteredPeople.filter((person) => {\r\n          const personsValues = person[filterAttributeMap[f]];\r\n\r\n          return selectedValues.some((v) => {\r\n            return !(personsValues.findIndex((o) => v === o.slug) === -1);\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    if (\r\n      searchInput &&\r\n      searchInput.value !== \"\" &&\r\n      searchInput.value.length >= 3\r\n    ) {\r\n      searcher.setCollection(filteredPeople);\r\n      const results = searcher.search(searchInput.value);\r\n\r\n      filteredPeople = results.map((r) => r.item);\r\n    }\r\n\r\n    updateSelectedFilters(selectedFilterInputs);\r\n    updatePeopleList(filteredPeople);\r\n  }\r\n\r\n  function bindEvents(el) {\r\n    filtersContainer = el.querySelector(\".wsu-people-list__filters-container\");\r\n    filterToggles = el.querySelectorAll(\".wsu-people-list__filter-toggle\");\r\n    searchInput = el.querySelector(\".wsu-people-list__search-input\");\r\n    selectedFiltersList = el.querySelector(\r\n      \".wsu-people-list__selected-filters-list\"\r\n    );\r\n    peopleContainer = el.querySelector(\".wsu-people-list__filters-container\");\r\n    peopleElements = el.querySelectorAll(\".js-people-list__person\");\r\n\r\n    // filter on select option change\r\n    filtersContainer.addEventListener(\"change\", function (e) {\r\n      if (e.target !== searchInput) {\r\n        processPeopleFilters();\r\n      }\r\n    });\r\n\r\n    // filter on search\r\n    searchInput?.addEventListener(\"input\", function (e) {\r\n      processPeopleFilters(); // should consider debouncing?\r\n    });\r\n\r\n    // remove selected filter on toggle click\r\n    selectedFiltersList.addEventListener(\"click\", function (e) {\r\n      const toggle = e.target.closest(\r\n        \".wsu-people-list__selected-filter-toggle\"\r\n      );\r\n\r\n      if (toggle) {\r\n        const input = filtersContainer.querySelector(\r\n          `input[name^=\"${toggle.dataset.filterList}\"][value=\"${toggle.dataset.value}\"]`\r\n        );\r\n        if (input) {\r\n          input.checked = false;\r\n          processPeopleFilters();\r\n        }\r\n      }\r\n    });\r\n\r\n    // toggling select filters\r\n    document.addEventListener(\r\n      \"click\",\r\n      function (e) {\r\n        const clickedFiltersContainer = e.target.closest(\r\n          \".wsu-people-list__filters-container\"\r\n        );\r\n        const toggle = e.target.closest(\".wsu-people-list__filter-toggle\");\r\n        const insideSelectFilter =\r\n          e.target.closest(\".wsu-people-list__select-filter\") !== null;\r\n\r\n        // handle clicks inside clicked filtersContainer\r\n        if (clickedFiltersContainer === filtersContainer) {\r\n          if (toggle) {\r\n            // close other open menus\r\n            filterToggles.forEach((t) => {\r\n              if (t !== toggle) {\r\n                wsuAriaExpanded(t, false);\r\n              }\r\n            });\r\n\r\n            wsuAriaExpanded(toggle, !wsuAriaIsExpanded(toggle));\r\n\r\n            // close all menus in filterContainer if click was not in a toggle or select menu\r\n          } else if (!insideSelectFilter) {\r\n            filterToggles.forEach((t) => {\r\n              wsuAriaExpanded(t, false);\r\n            });\r\n          }\r\n        }\r\n\r\n        // close all if click was outside current filtersContainer\r\n        if (\r\n          clickedFiltersContainer === null ||\r\n          clickedFiltersContainer !== filtersContainer\r\n        ) {\r\n          filterToggles.forEach((t) => {\r\n            wsuAriaExpanded(t, false);\r\n          });\r\n        }\r\n      },\r\n      false\r\n    );\r\n  }\r\n\r\n  function generateHTML(people) {\r\n    let content = \"\";\r\n\r\n    // create filters\r\n    const filtersContainer = createPeopleFilters(el.dataset.filters, people);\r\n    content += filtersContainer.outerHTML;\r\n\r\n    // create people list\r\n    const peopleContainer = createPeopleContainer();\r\n    populatePeopleContainer(people, peopleContainer);\r\n    content += peopleContainer.outerHTML;\r\n\r\n    // write html to dom\r\n    el.innerHTML = content;\r\n  }\r\n\r\n  function getPeople() {\r\n    // build request\r\n    const params = queryAttributes\r\n      .reduce(function (acc, curr, idx) {\r\n        const attrValue = el.getAttribute(\"data-\" + curr);\r\n\r\n        if (attrValue) {\r\n          acc.push(curr + \"=\" + attrValue);\r\n        }\r\n\r\n        return acc;\r\n      }, [])\r\n      .join(\"&\");\r\n\r\n    // make request\r\n    return fetch(apiEndpoint + params)\r\n      .then((response) => response.json())\r\n      .catch(function (error) {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  function init() {\r\n    getPeople().then((data) => {\r\n      allPeopleString = data;\r\n      people = JSON.parse(data);\r\n\r\n      generateHTML(people);\r\n\r\n      setTimeout(() => {\r\n        bindEvents(el);\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  init();\r\n};\r\n\r\ndocument.querySelectorAll(\".wsu-people-list\").forEach((el) => {\r\n  new PeopleList(el);\r\n});\r\n"],"sourceRoot":""}